#!/usr/local/bin/python
#
# showLimits : print the fairshare/limits associated with all SLURM accounts and sub-accounts
# 
# Author: Will French, Advanced Computing Center for Research and Education, Vanderbilt University
# Date: May, 2015
#
import argparse
import subprocess

def parse_cl():
    parser = argparse.ArgumentParser(description='A script for getting SLURM limit information on a per-group basis')
    parser.add_argument('-g',dest='group_name',type=str,default='',help='Name of account or group')
    parser.add_argument('--slurm_units',action='store_true',help='Switch for outputting in native SLURM units (MB and mins)')
    args = parser.parse_args()
    account = ""
    if ( args.group_name ):
        org_cmd = "sacctmgr show account "+args.group_name+" format=organization%30 --noheader"
        account = subprocess.check_output(org_cmd, shell=True)
        if ( not account ):
            print("Invalid group/account name: "+args.group_name)
            print("Try running this command without any arguments to see a list of valid group/account names")
            exit(-1)
        account = account.split()[0]
    return [account,args.slurm_units]
		

def add_group(account_list,group_list,account,group,fairshare,maxcpus,maxmem,cputime):
    if ( account != group ): 
        group_list.append([account,group,fairshare,maxcpus,maxmem,cputime])
    else:
        account_list.append([account,fairshare,maxcpus,maxmem,cputime])

def print_summary(account_list,group_list,slurm_units):
    group_cnt = 0
    if ( slurm_units ):
        print('ACCOUNT          GROUP   FAIRSHARE    MAXCPUS   MAXMEM(MB)  MAXCPUTIME(MINS)')
    else:
        print('ACCOUNT          GROUP   FAIRSHARE    MAXCPUS   MAXMEM(GB)  MAXCPUTIME(HRS)')
    for account in account_list:
        print('---------------------------------------------------------------------------')
        allfields = '{!s:24s}'.format(account[0].decode("utf-8"))
        for index,field in enumerate(account[1:]):
            field = str(field) if field != -1 else "-"
            if ( index == 0 ): field = '{!s:>7s}'.format(field.decode("utf-8"))  # fairshare
            elif ( index == 1 ): field = '{!s:>12s}'.format(field.decode("utf-8"))  # max cpus
            elif ( index == 2 ): field = '{!s:>11s}'.format(field.decode("utf-8"))  # max mem
            else: field = '{!s:>16s}'.format(field.decode("utf-8"))  # fairshare
            allfields += field
        print(allfields)
        while ( group_list[group_cnt][0] == account[0] ):
            group = group_list[group_cnt]
            line = '{!s:>25s}'.format(group[1].decode("utf-8"))
            for idx,fld in enumerate(group[2:]):
                fld = str(fld) if fld != -1 else "-"
                if ( idx == 0 ): fld = '{!s:>6s}'.format(fld.decode("utf-8"))  # fairshare
                elif ( idx == 1 ): fld = '{!s:>12s}'.format(fld.decode("utf-8"))  # max cpus
                elif ( idx == 2 ): fld = '{!s:>11s}'.format(fld.decode("utf-8"))  # max mem
                else: fld = '{!s:>16s}'.format(fld.decode("utf-8"))  # fairshare
                line += fld
            print(line)
            group_cnt += 1
            if ( group_cnt > len(group_list) - 1 ): break
    print('---------------------------------------------------------------------------')
    print('')

def main():
    [selected_account,mbs_and_mins] = parse_cl()
    cmd = subprocess.Popen("sacctmgr show accounts format=organization%30,account%30,user,fairshare,GrpCPUs,GrpMem,GrpCPURunMins WithAssoc --noheader --parsable2 | awk -F'|' '{if (!$3) print $0}' | sort -k1,1", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    accounts = [] # account name, fairshare, maxcpus, maxmem, cputime
    groups = [] # account name, group name, fairshare, maxcpus, maxmem, cputime
    for line in cmd.stdout:
        account,group,user,fairshare,maxcpus,maxmem,cputime = line.split('|')
        if ( not maxcpus ): maxcpus = -1 # this string is empty if not defined
        if ( not maxmem ): maxmem = -1 # this string is empty if not defined
        if ( cputime.isspace() ): cputime = -1 # this string contrains a single whitespace if not defined, so it's non-empty
        fairshare = int(fairshare)
        maxcpus = int(maxcpus)
        if ( mbs_and_mins ):
            maxmem = int(maxmem)
            cputime = int(cputime)
        else:
            maxmem = int(maxmem) / 1024 # convert to GB
            cputime = int(cputime) / 60 # convert to minutes 
        if ( account != "root" and account != "name" ): 
            if ( account == selected_account or not selected_account ):
                add_group(accounts,groups,account,group,fairshare,maxcpus,maxmem,cputime)
    print_summary(accounts,groups,mbs_and_mins)

if __name__ == '__main__':
    main()
